name: Package & Release

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: ["master", "self-hosted"]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  pull_request:
    branches: ["master", "self-hosted"]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # Format as <account>/<repo>
  # Must be lower case for container tools to parse correctly
  IMAGE_NAME: ${{ github.ref_name == 'self-hosted' && 'kong/insomnia-mockbin-self-hosted' || 'kong/insomnia-mockbin-cloud' }}
  HAS_ACCESS_TO_GITHUB_TOKEN: ${{ github.repository_owner == 'Kong' }}
  # Local docker OCI archive name until the image is pushed to registry
  DOCKER_OCI_ARCHIVE: "docker-archive"
  # Always use Docker Hub for publishing image signatures
  ## docker.io/kong/notary - Use Public Notary repository for release image signatures
  ## docker.io/kong/notary-internal - Use Private Notary repository for internal image signatures
  NOTARY_REPOSITORY: ${{ github.ref_type == 'tag' || github.ref_name == 'master' || github.ref_name == 'self-hosted' && 'kong/notary' || 'kong/notary-internal' }}

jobs:
  check:
    runs-on: ubuntu-24.04
    permissions:
      packages: write
      contents: write # publish sbom to GH releases/tag assets
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Perform SCA analysis for the code repository
      # Produces SBOM and CVE report
      # Helps understand vulnerabilities / license compliance across third party dependencies
      - id: sca-project
        uses: Kong/public-shared-actions/security-actions/sca@7040193cacd1787991b11b6b2ddb0a9719cbb533 # v5.1.3
        with:
          dir: .
          upload-sbom-release-assets: true

  # Build docker images
  build-images:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    needs: [check]
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
      image_tag_version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      # Extract metadata (tags, labels) for Docker Image
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        env:
          DOCKER_METADATA_PR_HEAD_SHA: true
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          sep-tags: ","

      # Login to Docker Hub to avoid image pull ratelimit failures on build step
      # https://github.com/docker/login-action
      - name: Login to Docker Hub
        uses: docker/login-action@3d58c274f17dffee475a5520cbe67f0a882c4dbb # v2.1.0
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      # Build Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: false #  only push after the image is scanned
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # these 2 options are needed so that the MediaType of the manifest is
          # OCI-compliant for other downstream integrations
          # see also:
          #   - https://github.com/docker/buildx/issues/1507
          #   - https://github.com/docker/buildx/issues/1509#issuecomment-1378538197
          provenance: false
          outputs: type=docker,dest=${{ env.DOCKER_OCI_ARCHIVE }}.tar,oci-mediatypes=true

      - name: Upload Docker OCI layout TAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DOCKER_OCI_ARCHIVE }}
          path: ${{ env.DOCKER_OCI_ARCHIVE }}.tar
          if-no-files-found: error
          retention-days: 1

  scan-images:
    runs-on: ubuntu-24.04
    permissions:
      contents: write # For publishing assets to releases
      packages: write
    needs: [check, build-images]
    if: >
      github.repository_owner == 'Kong'
      && needs.build-images.result == 'success'
    steps:
      - name: Download OCI docker TAR artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.DOCKER_OCI_ARCHIVE }}
          path: ${{ github.workspace }}
      - name: Load OCI docker TAR artifact
        run: |
          docker load -i ${{ github.workspace }}/${{ env.DOCKER_OCI_ARCHIVE }}.tar
          docker image ls

      - name: Scan the docker OCI Tar ball
        id: sbom_action_amd64
        uses: Kong/public-shared-actions/security-actions/scan-docker-image@a18abf762d6e2444bcbfd20de70451ea1e3bc1b1 # v4.1.3
        with:
          asset_prefix: image-${{ env.IMAGE_NAME }}-amd64
          image: ${{ env.DOCKER_OCI_ARCHIVE }}.tar
          upload-sbom-release-assets: true

  release-images:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write # needed for publishing the images
      id-token: write # needed for keyless signing of the images
    needs: [check, build-images, scan-images]
    if: >
      github.repository_owner == 'Kong'
      && needs.scan-images.result == 'success'
      && github.event_name != 'pull_request'
    env:
      IMAGE_TAGS: ${{ needs.build-images.outputs.image_tags }}
    outputs:
      image_name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      image_manifest_sha: ${{ steps.image_manifest_metadata.outputs.sha }}
      notary_repository: ${{ env.NOTARY_REPOSITORY }}
    steps:
      - name: Download OCI docker TAR artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.DOCKER_OCI_ARCHIVE }}
          path: ${{ github.workspace }}

      - name: Load OCI docker TAR artifact
        run: |
          docker load -i ${{ github.workspace }}/${{ env.DOCKER_OCI_ARCHIVE }}.tar
          docker image ls

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into image registry ${{ env.REGISTRY }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push images to registry
        id: publish_images
        run: |
          for tag in ${IMAGE_TAGS//,/ }; do \
            docker push $tag; \
          done

      # Setup regctl to parse platform specific image digest from image manifest
      - name: Install regctl
        uses: regclient/actions/regctl-installer@ce5fd131e371ffcdd7508b478cb223b3511a9183 # main

      # The image manifest digest/sha is generated only after the image is published to registry
      - name: Parse architecture specific digest from image manifest
        id: image_manifest_metadata
        run: |
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-images.outputs.IMAGE_TAG_VERSION }}
          sha="$(regctl image digest "${IMAGE}")"
          echo "sha=${sha}" >> $GITHUB_OUTPUT

      # Signing images requires image manifest digest
      - name: Sign images
        id: sign_images
        if: ${{ steps.image_manifest_metadata.outputs.sha != '' }}
        uses: Kong/public-shared-actions/security-actions/sign-docker-image@7040193cacd1787991b11b6b2ddb0a9719cbb533 # v5.0.3
        with:
          image_digest: ${{ steps.image_manifest_metadata.outputs.sha }}
          tags: ${{ env.IMAGE_TAGS }}
          image_registry_domain: ghcr.io
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          # Optional: Central notary repository for image signatures
          # signature_registry_domain: docker.io
          # signature_registry_username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
          # signature_registry_password: ${{ secrets.GHA_DOCKERHUB_PUSH_TOKEN }}
          # signature_registry: ${{ env.NOTARY_REPOSITORY }}

  # See https://github.com/slsa-framework/slsa-github-generator/tree/main/internal/builders/container
  release-images-provenance:
    needs: ["check", "build-images", "scan-images", "release-images"]
    if: ${{ github.ref_type == 'tag' || (github.event_name == 'push' && github.ref_name == 'master') }}
    # https://github.com/slsa-framework/slsa-github-generator/tree/main/internal/builders/container#referencing-the-slsa-generator
    # The reusable action MUST be referenced with a tag.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@2.1.0
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    with:
      image: ${{ needs.release-images.outputs.image_name }} # Image repository without tag. Eg: kong/insomnia-mockbins
      digest: ${{ needs.release-images.outputs.image_manifest_sha }} # Image manifest digest for the published docker image/TAR
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
